@inherits LayoutComponentBase
@using MudBlazor

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@if (_isAuthenticated)
{
    <MudLayout>
        <MudAppBar Elevation="1">
            <MudIconButton T="string" Icon="Icons.Material.Filled.Menu"
                           Color="Color.Inherit"
                           Edge="Edge.Start"
                           OnClick="@ToggleDrawer" />
            <MudSpacer />
            <MudText Typo="Typo.h6" Class="ml-3">PoemApp 管理后台</MudText>
            <MudSpacer />
            <MudText Typo="Typo.body2" Class="mr-3">欢迎, @_userName</MudText>
            <MudIconButton T="string" Icon="Icons.Material.Filled.ExitToApp"
                           Color="Color.Inherit"
                           OnClick="Logout" />
        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always">
            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.False" Class="pa-4">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>
}
else
{
    <MudLayout>
        <MudMainContent>
            @Body
        </MudMainContent>
    </MudLayout>
}

@code {
    private bool _drawerOpen = true;
    private bool _isAuthenticated = false;
    private string _userName = string.Empty;

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    [Inject] private IAdminAuthService AuthService { get; set; } = null!;
    [Inject] private NavigationManager Navigation { get; set; } = null!;
    [Inject] private ILogger<MainLayout> Logger { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (AuthenticationStateTask != null)
            {
                var authState = await AuthenticationStateTask;
                _isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
                _userName = authState.User.Identity?.Name ?? "用户";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "MainLayout 初始化错误");
        }
    }

    private async Task Logout()
    {
        try
        {
            // 使用控制器进行注销
            Navigation.NavigateTo("/Account/Logout", forceLoad: true);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "注销过程中发生错误");
        }
    }

    private void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }
}