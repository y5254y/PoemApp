// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PoemApp.Infrastructure.Data;

#nullable disable

namespace PoemApp.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("PoemApp.Core.Entities.Annotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("EndIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HighlightText")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("PoemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StartIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PoemId");

                    b.HasIndex("UserId");

                    b.ToTable("Annotations");
                });

            modelBuilder.Entity("PoemApp.Core.Entities.Audio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AverageRating")
                        .HasColumnType("REAL");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("PoemId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UploaderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PoemId");

                    b.HasIndex("UploaderId");

                    b.ToTable("Audios");
                });

            modelBuilder.Entity("PoemApp.Core.Entities.AudioRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AudioId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RatingTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AudioId");

                    b.HasIndex("UserId");

                    b.ToTable("AudioRatings");
                });

            modelBuilder.Entity("PoemApp.Core.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Biography")
                        .HasColumnType("TEXT");

                    b.Property<int>("Dynasty")
                        .HasMaxLength(20)
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("PoemApp.Core.Entities.AuthorRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FromAuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RelationshipType")
                        .HasMaxLength(20)
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToAuthorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FromAuthorId");

                    b.HasIndex("ToAuthorId");

                    b.ToTable("AuthorRelationships");
                });

            modelBuilder.Entity("PoemApp.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("PoemApp.Core.Entities.Poem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Annotation")
                        .HasColumnType("TEXT");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Background")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Translation")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Poems");
                });

            modelBuilder.Entity("PoemApp.Core.Entities.PoemCategory", b =>
                {
                    b.Property<int>("PoemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PoemId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("PoemCategories");
                });

            modelBuilder.Entity("PoemApp.Core.Entities.PointsRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RelatedId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Source")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PointsRecords");
                });

            modelBuilder.Entity("PoemApp.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QQId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("VipEndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("VipStartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("WeChatId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PoemApp.Core.Entities.UserFavorite", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PoemId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FavoriteTime")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "PoemId");

                    b.HasIndex("PoemId");

                    b.ToTable("UserFavorites");
                });

            modelBuilder.Entity("PoemApp.Core.Entities.Annotation", b =>
                {
                    b.HasOne("PoemApp.Core.Entities.Poem", "Poem")
                        .WithMany("Annotations")
                        .HasForeignKey("PoemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoemApp.Core.Entities.User", "User")
                        .WithMany("Annotations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PoemApp.Core.Entities.Audio", b =>
                {
                    b.HasOne("PoemApp.Core.Entities.Poem", "Poem")
                        .WithMany("Audios")
                        .HasForeignKey("PoemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoemApp.Core.Entities.User", "Uploader")
                        .WithMany("Audios")
                        .HasForeignKey("UploaderId");

                    b.Navigation("Poem");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("PoemApp.Core.Entities.AudioRating", b =>
                {
                    b.HasOne("PoemApp.Core.Entities.Audio", "Audio")
                        .WithMany("Ratings")
                        .HasForeignKey("AudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoemApp.Core.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audio");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PoemApp.Core.Entities.AuthorRelationship", b =>
                {
                    b.HasOne("PoemApp.Core.Entities.Author", "FromAuthor")
                        .WithMany("Relationships")
                        .HasForeignKey("FromAuthorId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("PoemApp.Core.Entities.Author", "ToAuthor")
                        .WithMany()
                        .HasForeignKey("ToAuthorId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("FromAuthor");

                    b.Navigation("ToAuthor");
                });

            modelBuilder.Entity("PoemApp.Core.Entities.Poem", b =>
                {
                    b.HasOne("PoemApp.Core.Entities.Author", "Author")
                        .WithMany("Poems")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("PoemApp.Core.Entities.PoemCategory", b =>
                {
                    b.HasOne("PoemApp.Core.Entities.Category", "Category")
                        .WithMany("Poems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoemApp.Core.Entities.Poem", "Poem")
                        .WithMany("Categories")
                        .HasForeignKey("PoemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Poem");
                });

            modelBuilder.Entity("PoemApp.Core.Entities.PointsRecord", b =>
                {
                    b.HasOne("PoemApp.Core.Entities.User", "User")
                        .WithMany("PointsRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PoemApp.Core.Entities.UserFavorite", b =>
                {
                    b.HasOne("PoemApp.Core.Entities.Poem", "Poem")
                        .WithMany("FavoritedBy")
                        .HasForeignKey("PoemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoemApp.Core.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PoemApp.Core.Entities.Audio", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("PoemApp.Core.Entities.Author", b =>
                {
                    b.Navigation("Poems");

                    b.Navigation("Relationships");
                });

            modelBuilder.Entity("PoemApp.Core.Entities.Category", b =>
                {
                    b.Navigation("Poems");
                });

            modelBuilder.Entity("PoemApp.Core.Entities.Poem", b =>
                {
                    b.Navigation("Annotations");

                    b.Navigation("Audios");

                    b.Navigation("Categories");

                    b.Navigation("FavoritedBy");
                });

            modelBuilder.Entity("PoemApp.Core.Entities.User", b =>
                {
                    b.Navigation("Annotations");

                    b.Navigation("Audios");

                    b.Navigation("Favorites");

                    b.Navigation("PointsRecords");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
